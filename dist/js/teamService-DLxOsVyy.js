import{s as o,l as c}from"./index-DERAfINP.js";const f=async n=>{const{data:r,error:e}=await o.functions.invoke("send-team-invitation",{body:n});if(e)throw c.error("Email sending failed",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"sendInvitationEmail"}),e;return r},u=async n=>{try{const{data:r,error:e}=await o.from("user_profiles").select("tenant_id").eq("id",n).single();if(e)throw e;const{data:t,error:i}=await o.from("user_profiles").select(`
        id,
        tenant_id,
        name,
        email,
        phone,
        role,
        status,
        joined_at,
        invited_by,
        company
      `).eq("tenant_id",r.tenant_id).order("joined_at",{ascending:!1});if(i)throw i;return t||[]}catch(r){throw c.error("Failed to fetch team members",{error:r instanceof Error?r.message:"Unknown error",component:"teamService",action:"getTeamMembers"}),r}},g=async n=>{try{const{data:r,error:e}=await o.from("user_profiles").select("tenant_id").eq("id",n).single();if(e)throw e;const{data:t,error:i}=await o.from("team_invitations").select(`
        id,
        tenant_id,
        inviter_id,
        email,
        role,
        status,
        invitation_token,
        expires_at,
        created_at
      `).eq("tenant_id",r.tenant_id).order("created_at",{ascending:!1});if(i)throw i;if(t&&t.length>0){const s=[...new Set(t.map(d=>d.inviter_id))],{data:a}=await o.from("user_profiles").select("id, name").in("id",s),m=a?.reduce((d,l)=>(d[l.id]=l.name,d),{})||{};return t.map(d=>({...d,inviter_name:m[d.inviter_id]||"알 수 없는 사용자"}))}return[]}catch(r){throw c.error("Failed to fetch team invitations",{error:r instanceof Error?r.message:"Unknown error",component:"teamService",action:"getTeamInvitations"}),r}},h=async(n,r)=>{try{const{data:e,error:t}=await o.from("user_profiles").select(`
        tenant_id, 
        role, 
        name,
        tenant:tenant_id(name)
      `).eq("id",n).single();if(t)throw t;if(e.role!=="owner"&&e.role!=="admin")throw new Error("팀원을 초대할 권한이 없습니다.");const{data:i}=await o.from("user_profiles").select("id").eq("tenant_id",e.tenant_id).eq("email",r.email).single();if(i)throw new Error("이미 팀에 속한 회원입니다.");const{data:s}=await o.from("team_invitations").select("id, status").eq("tenant_id",e.tenant_id).eq("email",r.email).eq("status","pending").single();if(s)throw new Error("이미 초대된 이메일입니다.");const{data:a,error:m}=await o.from("team_invitations").insert({tenant_id:e.tenant_id,inviter_id:n,email:r.email,role:r.role}).select().single();if(m)throw m;try{await f({invitationToken:a.invitation_token,recipientEmail:r.email,inviterName:e.name,teamName:(e&&"tenant"in e&&e.tenant?e.tenant?.name:null)||"팀",role:r.role,message:r.message})}catch(d){c.warn("Email sending failed but invitation created",{error:d instanceof Error?d.message:"Unknown error",component:"teamService",action:"inviteTeamMember"})}return await o.from("team_activity_logs").insert({tenant_id:e.tenant_id,user_id:n,action:"invitation_sent",details:{invited_email:r.email,role:r.role,message:r.message}}),{...a,inviteUrl:`${typeof window<"u"?window.location.origin:"https://summi3-2mk8sy7pu-daesung75-6440s-projects.vercel.app"}/team/invite?token=${a.invitation_token}`}}catch(e){throw c.error("Failed to invite team member",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"inviteTeamMember"}),e}},p=async(n,r)=>{try{const{data:e,error:t}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(t)throw t;if(e.role!=="owner"&&e.role!=="admin")throw new Error("팀원을 추가할 권한이 없습니다.");const{data:i,error:s}=await o.from("user_profiles").select("id, name, email, tenant_id").eq("id",r.user_id).single();if(s)throw new Error("존재하지 않는 사용자입니다.");if(i.tenant_id===e.tenant_id)throw new Error("이미 팀에 속한 회원입니다.");const{data:a,error:m}=await o.from("user_profiles").update({tenant_id:e.tenant_id,role:r.role,invited_by:n,joined_at:new Date().toISOString()}).eq("id",r.user_id).select().single();if(m)throw m;return await o.from("team_activity_logs").insert({tenant_id:e.tenant_id,user_id:n,action:"member_added",details:{added_user_id:r.user_id,added_user_name:i.name,role:r.role,previous_tenant_id:i.tenant_id,transferred_from_team:!!i.tenant_id}}),a}catch(e){throw c.error("Failed to add team member",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"addTeamMember"}),e}},v=async(n,r,e)=>{try{const{data:t,error:i}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(i)throw i;if(t.role!=="owner"&&!(t.role==="admin"&&["member","viewer"].includes(e)))throw new Error("역할을 변경할 권한이 없습니다.");if(n===r)throw new Error("자신의 역할은 변경할 수 없습니다.");const{data:s,error:a}=await o.from("user_profiles").update({role:e}).eq("id",r).eq("tenant_id",t.tenant_id).select().single();if(a)throw a;return await o.from("team_activity_logs").insert({tenant_id:t.tenant_id,user_id:n,action:"role_changed",details:{target_user_id:r,new_role:e}}),s}catch(t){throw c.error("Failed to change member role",{error:t instanceof Error?t.message:"Unknown error",component:"teamService",action:"changeMemberRole"}),t}},E=async(n,r)=>{try{const{data:e,error:t}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(t)throw t;if(e.role!=="owner"&&e.role!=="admin")throw new Error("팀원을 제거할 권한이 없습니다.");if(n===r)throw new Error("자신을 팀에서 제거할 수 없습니다.");const{data:i,error:s}=await o.from("user_profiles").select("name, role").eq("id",r).eq("tenant_id",e.tenant_id).single();if(s)throw new Error("팀에서 해당 멤버를 찾을 수 없습니다.");if(i.role==="owner")throw new Error("팀 소유자는 제거할 수 없습니다.");const{data:a,error:m}=await o.from("tenants").insert({name:`${i.name}의 부동산`}).select().single();if(m)throw m;const{error:d}=await o.from("user_profiles").update({tenant_id:a.id,role:"owner",invited_by:null}).eq("id",r);if(d)throw d;return await o.from("team_activity_logs").insert({tenant_id:e.tenant_id,user_id:n,action:"member_removed",details:{removed_user_id:r,removed_user_name:i.name}}),!0}catch(e){throw c.error("Failed to remove team member",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"removeTeamMember"}),e}},y=async(n,r)=>{try{const{data:e,error:t}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(t)throw t;if(e.role!=="owner"&&e.role!=="admin")throw new Error("초대를 취소할 권한이 없습니다.");const{error:i}=await o.from("team_invitations").delete().eq("id",r).eq("tenant_id",e.tenant_id);if(i)throw i;return!0}catch(e){throw c.error("Failed to cancel invitation",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"cancelInvitation"}),e}},q=async(n,r)=>{try{const{data:e,error:t}=await o.from("user_profiles").select("tenant_id").eq("id",r).single();if(t)throw t;const{data:i,error:s}=await o.from("user_profiles").select("id, name, email, company").or(`name.ilike.%${n}%,email.ilike.%${n}%`).or(`tenant_id.is.null,tenant_id.neq.${e.tenant_id}`).neq("id",r).limit(10);if(s)throw s;return i||[]}catch(e){throw c.error("Failed to search users",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"searchUsers"}),e}},b=async(n,r,e)=>{try{const{data:t,error:i}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(i)throw i;if(n!==r&&t.role!=="owner"&&t.role!=="admin")throw new Error("팀원 정보를 수정할 권한이 없습니다.");const{data:s,error:a}=await o.from("user_profiles").update(e).eq("id",r).eq("tenant_id",t.tenant_id).select().single();if(a)throw a;return n!==r&&await o.from("team_activity_logs").insert({tenant_id:t.tenant_id,user_id:n,action:"member_info_updated",details:{target_user_id:r,updated_fields:Object.keys(e)}}),s}catch(t){throw c.error("Failed to update member info",{error:t instanceof Error?t.message:"Unknown error",component:"teamService",action:"updateMemberInfo"}),t}},k=async(n,r,e)=>{try{const{data:t,error:i}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(i)throw i;if(t.role!=="owner"&&t.role!=="admin")throw new Error("팀원 상태를 변경할 권한이 없습니다.");if(n===r)throw new Error("자신의 상태는 변경할 수 없습니다.");const{data:s,error:a}=await o.from("user_profiles").update({status:e}).eq("id",r).eq("tenant_id",t.tenant_id).select().single();if(a)throw a;return await o.from("team_activity_logs").insert({tenant_id:t.tenant_id,user_id:n,action:"member_status_changed",details:{target_user_id:r,new_status:e}}),s}catch(t){throw c.error("Failed to change member status",{error:t instanceof Error?t.message:"Unknown error",component:"teamService",action:"changeMemberStatus"}),t}},M=async(n,r=50)=>{try{const{data:e,error:t}=await o.from("user_profiles").select("tenant_id, role").eq("id",n).single();if(t)throw t;if(e.role!=="owner"&&e.role!=="admin")throw new Error("활동 로그를 조회할 권한이 없습니다.");const{data:i,error:s}=await o.from("team_activity_logs").select(`
        id,
        action,
        details,
        created_at,
        user_id
      `).eq("tenant_id",e.tenant_id).order("created_at",{ascending:!1}).limit(r);if(s)throw s;if(i&&i.length>0){const a=[...new Set(i.map(l=>l.user_id))],{data:m}=await o.from("user_profiles").select("id, name").in("id",a),d=m?.reduce((l,_)=>(l[_.id]=_.name,l),{})||{};return i.map(l=>({...l,user_name:d[l.user_id]||"알 수 없는 사용자"}))}return[]}catch(e){throw c.error("Failed to fetch team activity logs",{error:e instanceof Error?e.message:"Unknown error",component:"teamService",action:"getTeamActivityLogs"}),e}};export{M as a,g as b,y as c,p as d,v as e,b as f,u as g,h as i,E as r,q as s,k as u};
