import{s as c}from"./useProperties-Clv9Am2z.js";import{l as w}from"./index-DmqqP2-K.js";var S=Object.defineProperty,R=(i,s,t)=>s in i?S(i,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[s]=t,_=(i,s,t)=>R(i,typeof s!="symbol"?s+"":s,t);class a extends Error{constructor(s,t){var e=(...r)=>(super(...r),_(this,"code"),_(this,"field"),_(this,"details"),this);typeof s=="string"?(e(s),this.code="UNKNOWN_ERROR"):(e(s.message),this.code=s.code,this.field=s.field||void 0,this.details=s.details||void 0),this.name="ServiceError",t&&w.error("ServiceError occurred:",{code:this.code,message:this.message,field:this.field,context:t})}}class D{async getSchedules(s,t){try{let e=c.from("schedules").select("*").eq("tenant_id",s).order("start_date",{ascending:!0});t&&(t.category&&(e=e.eq("category",t.category)),t.priority&&(e=e.eq("priority",t.priority)),t.status&&(e=e.eq("status",t.status)),t.date_range&&(e=e.gte("start_date",t.date_range.start).lte("end_date",t.date_range.end)),t.created_by&&(e=e.eq("created_by",t.created_by)));const{data:r,error:d}=await e;if(d)throw new a({code:"SCHEDULE_FETCH_ERROR",message:"스케줄 목록을 불러오는 중 오류가 발생했습니다.",details:d});return r||[]}catch(e){throw e instanceof a?e:new a({code:"SCHEDULE_FETCH_UNEXPECTED_ERROR",message:"스케줄 목록을 불러오는 중 예상치 못한 오류가 발생했습니다.",details:e})}}async getSchedulesByDateRange(s,t,e){return this.getSchedules(s,{date_range:{start:t,end:e}})}async getSchedulesByDate(s,t){const e=new Date(t);e.setHours(0,0,0,0);const r=new Date(t);return r.setHours(23,59,59,999),this.getSchedulesByDateRange(s,e.toISOString(),r.toISOString())}async getSchedule(s){try{const{data:t,error:e}=await c.from("schedules").select("*").eq("id",s).single();if(e){if(e.code==="PGRST116")return null;throw new a({code:"SCHEDULE_GET_ERROR",message:"스케줄을 불러오는 중 오류가 발생했습니다.",details:e})}return t}catch(t){throw t instanceof a?t:new a({code:"SCHEDULE_GET_UNEXPECTED_ERROR",message:"스케줄을 불러오는 중 예상치 못한 오류가 발생했습니다.",details:t})}}async createSchedule(s,t,e){try{const r={...e};(!r.property_id||r.property_id.trim()==="")&&delete r.property_id,Array.isArray(r.attendees)&&r.attendees.length===0&&delete r.attendees;const d={...r,tenant_id:s,created_by:t,status:"scheduled",created_at:new Date().toISOString(),updated_at:new Date().toISOString()},{data:{user:n}}=await c.auth.getUser(),{data:o,error:E}=await c.from("schedules").insert([d]).select().single();if(E)throw new a({code:"SCHEDULE_CREATE_ERROR",message:`스케줄 등록 중 오류가 발생했습니다: ${E.message}`,details:E});return o}catch(r){throw r instanceof a?r:new a({code:"SCHEDULE_CREATE_UNEXPECTED_ERROR",message:"스케줄 등록 중 예상치 못한 오류가 발생했습니다.",details:r})}}async updateSchedule(s,t,e){try{let r;if(e)r=e;else{const{data:{user:u},error:h}=await c.auth.getUser();if(h||!u)throw new a({code:"SCHEDULE_UPDATE_AUTH_ERROR",message:"인증이 필요합니다.",details:h});r=u.id}const{data:d,error:n}=await c.from("schedules").select("*").eq("id",s).eq("created_by",r).eq("tenant_id",r).single();if(n||!d)throw new a({code:"SCHEDULE_NOT_FOUND",message:"수정할 스케줄을 찾을 수 없거나 권한이 없습니다.",details:n});if(d.created_by!==r||d.tenant_id!==r)throw new a({code:"SCHEDULE_UPDATE_PERMISSION_ERROR",message:"이 스케줄을 수정할 권한이 없습니다.",details:{scheduleCreatedBy:d.created_by,currentUserId:r}});const o={...t};o.property_id!==void 0&&(!o.property_id||o.property_id.trim()==="")&&delete o.property_id,Array.isArray(o.attendees)&&o.attendees.length===0&&delete o.attendees;const E={...o,updated_at:new Date().toISOString()},{data:g,error:l}=await c.from("schedules").update(E).eq("id",s).eq("created_by",r).eq("tenant_id",r).select().single();if(l)throw new a({code:"SCHEDULE_UPDATE_ERROR",message:"스케줄 수정 중 오류가 발생했습니다.",details:l});return g}catch(r){throw r instanceof a?r:new a({code:"SCHEDULE_UPDATE_UNEXPECTED_ERROR",message:"스케줄 수정 중 예상치 못한 오류가 발생했습니다.",details:r})}}async updateScheduleStatus(s,t){return this.updateSchedule(s,{status:t})}async deleteSchedule(s,t){try{let e;if(t)e=t;else{const{data:{user:d},error:n}=await c.auth.getUser();if(n||!d)throw new a({code:"SCHEDULE_DELETE_AUTH_ERROR",message:"인증이 필요합니다.",details:n});e=d.id}const{error:r}=await c.from("schedules").delete().eq("id",s).eq("created_by",e).eq("tenant_id",e);if(r)throw new a({code:"SCHEDULE_DELETE_ERROR",message:"스케줄 삭제 중 오류가 발생했습니다.",details:r})}catch(e){throw e instanceof a?e:new a({code:"SCHEDULE_DELETE_UNEXPECTED_ERROR",message:"스케줄 삭제 중 예상치 못한 오류가 발생했습니다.",details:e})}}async getTodaySchedules(s,t=3){try{const e=new Date,r=new Date(e);r.setHours(0,0,0,0);const d=new Date(e);d.setHours(23,59,59,999);const{data:n,error:o}=await c.from("schedules").select("*").eq("tenant_id",s).gte("start_date",r.toISOString()).lte("start_date",d.toISOString()).in("status",["scheduled","in_progress"]).order("start_date",{ascending:!0}).limit(t);if(o)throw new a({code:"SCHEDULE_TODAY_ERROR",message:"당일 일정을 불러오는 중 오류가 발생했습니다.",details:o});return n||[]}catch(e){throw e instanceof a?e:new a({code:"SCHEDULE_TODAY_UNEXPECTED_ERROR",message:"당일 일정을 불러오는 중 예상치 못한 오류가 발생했습니다.",details:e})}}async getUpcomingSchedules(s,t=3){try{const e=new Date;e.setDate(e.getDate()+1),e.setHours(0,0,0,0);const{data:r,error:d}=await c.from("schedules").select("*").eq("tenant_id",s).gte("start_date",e.toISOString()).in("status",["scheduled","in_progress"]).order("start_date",{ascending:!0}).limit(t);if(d)throw new a({code:"SCHEDULE_UPCOMING_ERROR",message:"다가오는 일정을 불러오는 중 오류가 발생했습니다.",details:d});return r||[]}catch(e){throw e instanceof a?e:new a({code:"SCHEDULE_UPCOMING_UNEXPECTED_ERROR",message:"다가오는 일정을 불러오는 중 예상치 못한 오류가 발생했습니다.",details:e})}}async getScheduleStats(s){try{const{data:t,error:e}=await c.from("schedules").select("status, start_date, end_date").eq("tenant_id",s);if(e)throw new a({code:"SCHEDULE_STATS_ERROR",message:"스케줄 통계를 불러오는 중 오류가 발생했습니다.",details:e});const r=new Date,d=t||[],n={total:d.length,scheduled:0,inProgress:0,completed:0,overdue:0};return d.forEach(o=>{const E=new Date(o.end_date);switch(o.status){case"scheduled":E<r?n.overdue++:n.scheduled++;break;case"in_progress":n.inProgress++;break;case"completed":n.completed++;break}}),n}catch(t){throw t instanceof a?t:new a({code:"SCHEDULE_STATS_UNEXPECTED_ERROR",message:"스케줄 통계를 불러오는 중 예상치 못한 오류가 발생했습니다.",details:t})}}}const m=new D;export{m as s};
